{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","showMenu","setShowMenu","selectedList","setSelectedList","name","isShowing","id","value","listItems","setListItems","className","onClick","map","item","index","console","log","handleShowItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAwEeA,MAtEf,WAEE,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,oBAAS,GAAzC,mBACA,GADA,UACwCA,sBAAxC,mBAAOG,EAAP,KAAqBC,EAArB,KAEA,EAAiCJ,mBAAS,CACxC,CACEK,KAAM,SACNC,WAAW,EACXC,GAAI,EACJC,MAAO,CAAC,SAAS,SAAS,WAE5B,CACEH,KAAM,SACNC,WAAW,EACXC,GAAI,EACJC,MAAO,CAAC,SAAS,SAAS,WAE5B,CACEH,KAAM,SACNC,WAAW,EACXC,GAAI,EACJC,MAAO,CAAC,SAAS,SAAS,aAjB9B,mBAAOC,EAAP,KAAiBC,EAAjB,KAqCA,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,WAAf,cAA2B,yBAAQC,QAftB,WACrBV,GAAaD,IAcsB,cAAmCA,EAAU,IAAM,IAAnD,OAA3B,OACA,sBAAKU,UAAU,WAAf,cAA2B,0CAA3B,UAEHV,GAAY,qBAAKU,UAAU,OAAf,SACX,qBAAKA,UAAU,iBAAf,SACKF,EAAUI,KAAI,SAACC,EAAMC,GACpB,OAAO,sBAAKJ,UAAU,YAAf,UACH,sBAAKA,UAAU,aAAf,UACE,wBAAQC,QAAS,kBAnBd,SAACE,EAAKC,GAC3BX,EAAgBW,GAChBN,EAAUM,GAAV,2BAAuBD,GAAvB,IAA6BR,WAAYQ,EAAKR,YAC9CI,EAAa,YAAID,IACjBO,QAAQC,IAAIR,GAe6BS,CAAeJ,EAAKC,IAA3C,iBACA,qCAAQD,EAAKT,KAAb,UAECS,EAAKR,WAAaG,EAAUN,GAAcK,MAAMK,KAAI,SAAAC,GACnD,OAAO,sBAAKH,UAAU,OAAf,cAAwBG,EAAxB,0BCjDhBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eb5c2d27.chunk.js","sourcesContent":["import './App.scss';\nimport { useEffect, useState } from 'react';\nfunction App() {\n\n  const [showMenu, setShowMenu] = useState(false)\n  const [showItem, setShowItem] = useState(false)\n  const [selectedList, setSelectedList] = useState()\n\n  const [listItems,setListItems] = useState([\n    {\n      name: 'list 1',\n      isShowing: false,\n      id: 0,\n      value: ['item 1','item 2','item 3']\n    },\n    {\n      name: 'list 2',\n      isShowing: false,\n      id: 1,\n      value: ['item 4','item 5','item 6']\n    },\n    {\n      name: 'list 3',\n      isShowing: false,\n      id: 2,\n      value: ['item 7','item 8','item 9']\n    }\n  ])\n\n  // useEffect(() => {\n  //   listItems[selectedList] = {...listItems, isShowing: !listItems.isShowing}\n  //   console.log(listItems)\n  // },[selectedList])\n\n  const handleShowMenu = () => { \n    setShowMenu(!showMenu)\n  }\n\n  const handleShowItem = (item,index) => {\n    setSelectedList(index)\n    listItems[index] = {...item, isShowing: !item.isShowing}\n    setListItems([...listItems])\n    console.log(listItems)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"menu\">\n            <div className=\"dropdown\"> <button onClick={handleShowMenu}> {showMenu? '-' : '+'} </button> </div> \n            <div className=\"menuName\"> <text> Menu </text> </div>  \n        </div>\n        {showMenu && <div className=\"list\">\n          <div className=\"grid-container\">\n              {listItems.map((item, index) => {\n                return <div className=\"grid-item\">\n                    <div className=\"list-items\">\n                      <button onClick={() => handleShowItem(item,index)}> + </button>\n                      <text> {item.name} </text>\n                    </div>\n                      {item.isShowing && listItems[selectedList].value.map(item => {\n                        return <div className=\"item\"> {item} </div>\n                      })} \n                  </div>\n              })}\n          </div>\n        </div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}